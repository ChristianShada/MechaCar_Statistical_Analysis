
> ###DELIVERABLE 1 REQUIREMENTS###
> #3 Use the library() function to load the dplyr package.
> library(dplyr)
> 
> #4 Import and read in the MechaCar_mpg.csv file as a dataframe.
> library(tidyverse)
> mecha_mpg <- read.csv(file='MechaCar_mpg.csv',check.names=F,stringsAsFactors = F) 
> 
> #5 Perform linear regression using the lm() function. In the lm() function, pass in all six variables (i.e., columns), and add the dataframe you created in Step 4 as the data parameter.
> lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD, data=mecha_mpg)

Call:
lm(formula = mpg ~ vehicle_length + vehicle_weight + spoiler_angle + 
    ground_clearance + AWD, data = mecha_mpg)

Coefficients:
     (Intercept)    vehicle_length    vehicle_weight     spoiler_angle  ground_clearance  
      -1.040e+02         6.267e+00         1.245e-03         6.877e-02         3.546e+00  
             AWD  
      -3.411e+00  

> 
> #6 Using the summary() function, determine the p-value and the r-squared value for the linear regression model.
> summary(lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD, data=mecha_mpg)) 

Call:
lm(formula = mpg ~ vehicle_length + vehicle_weight + spoiler_angle + 
    ground_clearance + AWD, data = mecha_mpg)

Residuals:
     Min       1Q   Median       3Q      Max 
-19.4701  -4.4994  -0.0692   5.4433  18.5849 

Coefficients:
                   Estimate Std. Error t value Pr(>|t|)    
(Intercept)      -1.040e+02  1.585e+01  -6.559 5.08e-08 ***
vehicle_length    6.267e+00  6.553e-01   9.563 2.60e-12 ***
vehicle_weight    1.245e-03  6.890e-04   1.807   0.0776 .  
spoiler_angle     6.877e-02  6.653e-02   1.034   0.3069    
ground_clearance  3.546e+00  5.412e-01   6.551 5.21e-08 ***
AWD              -3.411e+00  2.535e+00  -1.346   0.1852    
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Residual standard error: 8.774 on 44 degrees of freedom
Multiple R-squared:  0.7149,	Adjusted R-squared:  0.6825 
F-statistic: 22.07 on 5 and 44 DF,  p-value: 5.35e-11

> 
> #Additional: Eliminate the variables that have little impact on predicting mpg to identify impact:
> lm(mpg ~ vehicle_length + ground_clearance, data=mecha_mpg)

Call:
lm(formula = mpg ~ vehicle_length + ground_clearance, data = mecha_mpg)

Coefficients:
     (Intercept)    vehicle_length  ground_clearance  
         -91.557             6.081             3.567  

> summary(lm(mpg ~ vehicle_length + ground_clearance, data=mecha_mpg)) 

Call:
lm(formula = mpg ~ vehicle_length + ground_clearance, data = mecha_mpg)

Residuals:
    Min      1Q  Median      3Q     Max 
-17.493  -7.705   1.344   6.642  18.500 

Coefficients:
                 Estimate Std. Error t value Pr(>|t|)    
(Intercept)      -91.5573    13.9649  -6.556 3.86e-08 ***
vehicle_length     6.0811     0.6732   9.033 7.68e-12 ***
ground_clearance   3.5669     0.5401   6.604 3.26e-08 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Residual standard error: 9.078 on 47 degrees of freedom
Multiple R-squared:  0.674,	Adjusted R-squared:  0.6601 
F-statistic: 48.59 on 2 and 47 DF,  p-value: 3.637e-12

 
> ###DELIVERABLE 2 REQUIREMENTS###
> 
> #2 In your MechaCarChallenge.RScript, import and read in the Suspension_Coil.csv file as a table.
> mecha_coil <- read.csv(file='Suspension_Coil.csv',check.names=F,stringsAsFactors = F) 
> 
> View(mecha_mpg)
> #3 Write an RScript that creates a total_summary dataframe using the summarize() function to get the mean, median, variance, and standard deviation of the suspension coil’s PSI column.
> total_summary <- mecha_coil %>% summarize(Mean_PSI=mean(PSI),
+                                           Median_PSI=median(PSI),
+                                           Var_PSI=var(PSI),
+                                           Std_Dev_PSI=sd(PSI),
+                                           Num_Coil=n(), .groups = 'keep') 
> View(total_summary)
> 
> #4 Write an RScript that creates a lot_summary dataframe using the group_by() and the summarize() functions to group each manufacturing lot by the mean, median, variance, and standard deviation of the suspension coil’s PSI column.
> lot_summary <- mecha_coil  %>% group_by(Manufacturing_Lot) %>% summarize(Mean_PSI=mean(PSI),
+                                                                          Median_PSI=median(PSI),
+                                                                          Var_PSI=var(PSI),
+                                                                          Std_Dev_PSI=sd(PSI),
+                                                                          Num_Coil=n(), .groups = 'keep')             
> View(total_summary)
> View(mecha_mpg)
> View(mecha_coil)
> View(lot_summary)
> View(total_summary)
> 
> #Box plot: PSI Whole Lot
> plt1 <- ggplot(mecha_coil,aes(y=PSI)) #import dataset into ggplot2
> plt1 + geom_boxplot() #add boxplot
> 
> #Box Plot: PSI Each individual Lot
> plt2 <- ggplot(mecha_coil,aes(x=Manufacturing_Lot,y=PSI)) #import dataset into ggplot2
> plt2 + geom_boxplot()
> View(plt2)
> 
> ###DELIVERABLE 3 REQUIREMENTS###
> 
> #1 In your MechaCarChallenge.RScript, write an RScript using the t.test() function to determine if the PSI across all manufacturing lots is statistically different from the population mean of 1,500 pounds per square inch.
> lot1 <- subset(mecha_coil, Manufacturing_Lot=="Lot1")
> lot2 <- subset(mecha_coil, Manufacturing_Lot=="Lot2")
> lot3 <- subset(mecha_coil, Manufacturing_Lot=="Lot3")

> #2 Next, write three more RScripts in your MechaCarChallenge.RScript using the t.test() function and its subset() argument to determine if the PSI for each manufacturing lot is statistically different from the population mean of 1,500 pounds per square inch.
> lot1 <- subset(mecha_coil, Manufacturing_Lot=="Lot1")
> lot2 <- subset(mecha_coil, Manufacturing_Lot=="Lot2")
> lot3 <- subset(mecha_coil, Manufacturing_Lot=="Lot3")
> 
> t.test(lot1$PSI,mu=1500)

	One Sample t-test

data:  lot1$PSI
t = 0, df = 49, p-value = 1
alternative hypothesis: true mean is not equal to 1500
95 percent confidence interval:
 1499.719 1500.281
sample estimates:
mean of x 
     1500 

> t.test(lot2$PSI,mu=1500)

	One Sample t-test

data:  lot2$PSI
t = 0.51745, df = 49, p-value = 0.6072
alternative hypothesis: true mean is not equal to 1500
95 percent confidence interval:
 1499.423 1500.977
sample estimates:
mean of x 
   1500.2 

> t.test(lot3$PSI,mu=1500)

	One Sample t-test

data:  lot3$PSI
t = -2.0916, df = 49, p-value = 0.04168
alternative hypothesis: true mean is not equal to 1500
95 percent confidence interval:
 1492.431 1499.849
sample estimates:
mean of x 
  1496.14 
